import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import Icon from '@/components/ui/icon';

interface GamePiece {
  id: number;
  name: string;
  x: number;
  y: number;
  placed: boolean;
  correctX: number;
  correctY: number;
}

const InteractiveGame: React.FC = () => {
  const [gameMode, setGameMode] = useState<'puzzle' | 'quiz' | 'coloring' | null>(null);
  const [score, setScore] = useState(0);
  const [level, setLevel] = useState(1);
  const [progress, setProgress] = useState(0);
  const [currentQuestion, setCurrentQuestion] = useState(0);

  // –ü–∞–∑–ª "–ö–∞—Ä—Ç–∞ –†–æ—Å—Å–∏–∏"
  const [puzzlePieces, setPuzzlePieces] = useState<GamePiece[]>([
    { id: 1, name: '–ú–æ—Å–∫–≤–∞', x: 100, y: 150, placed: false, correctX: 200, correctY: 180 },
    { id: 2, name: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', x: 80, y: 100, placed: false, correctX: 180, correctY: 120 },
    { id: 3, name: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', x: 300, y: 200, placed: false, correctX: 400, correctY: 200 },
    { id: 4, name: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', x: 250, y: 180, placed: false, correctX: 300, correctY: 190 }
  ]);

  // –í–∏–∫—Ç–æ—Ä–∏–Ω–∞
  const quizQuestions = [
    {
      question: '–ö–∞–∫–æ–≥–æ —Ü–≤–µ—Ç–∞ —Å—Ä–µ–¥–Ω—è—è –ø–æ–ª–æ—Å–∞ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ñ–ª–∞–≥–∞?',
      options: ['–ö—Ä–∞—Å–Ω–∞—è', '–°–∏–Ω—è—è', '–ë–µ–ª–∞—è', '–ó–µ–ª—ë–Ω–∞—è'],
      correct: 1,
      emoji: 'üá∑üá∫'
    },
    {
      question: '–ö–∞–∫–∞—è –ø—Ç–∏—Ü–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∞ –Ω–∞ –≥–µ—Ä–±–µ –†–æ—Å—Å–∏–∏?',
      options: ['–°–æ–∫–æ–ª', '–û—Ä—ë–ª', '–Ø—Å—Ç—Ä–µ–±', '–õ–µ–±–µ–¥—å'],
      correct: 1,
      emoji: 'ü¶Ö'
    },
    {
      question: '–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –≥–ª–∞–≤–Ω–∞—è –ø–ª–æ—â–∞–¥—å –ú–æ—Å–∫–≤—ã?',
      options: ['–î–≤–æ—Ä—Ü–æ–≤–∞—è', '–ö—Ä–∞—Å–Ω–∞—è', '–¢–µ–∞—Ç—Ä–∞–ª—å–Ω–∞—è', '–ú–∞–Ω–µ–∂–Ω–∞—è'],
      correct: 1,
      emoji: 'üèõÔ∏è'
    },
    {
      question: '–ö–∞–∫–æ–µ –¥–µ—Ä–µ–≤–æ —è–≤–ª—è–µ—Ç—Å—è —Å–∏–º–≤–æ–ª–æ–º –†–æ—Å—Å–∏–∏?',
      options: ['–î—É–±', '–Å–ª–∫–∞', '–ë–µ—Ä—ë–∑–∞', '–ö–ª—ë–Ω'],
      correct: 2,
      emoji: 'üå≥'
    }
  ];

  const [selectedAnswer, setSelectedAnswer] = useState<number | null>(null);
  const [showResult, setShowResult] = useState(false);

  useEffect(() => {
    if (gameMode) {
      setProgress((score / 100) * 100);
    }
  }, [score, gameMode]);

  const handlePuzzleDrop = (pieceId: number, x: number, y: number) => {
    setPuzzlePieces(pieces => 
      pieces.map(piece => {
        if (piece.id === pieceId) {
          const distance = Math.sqrt(
            Math.pow(x - piece.correctX, 2) + Math.pow(y - piece.correctY, 2)
          );
          
          if (distance < 50) {
            setScore(prev => prev + 25);
            return { ...piece, x: piece.correctX, y: piece.correctY, placed: true };
          } else {
            return { ...piece, x, y };
          }
        }
        return piece;
      })
    );
  };

  const handleQuizAnswer = (answerIndex: number) => {
    setSelectedAnswer(answerIndex);
    setShowResult(true);
    
    if (answerIndex === quizQuestions[currentQuestion].correct) {
      setScore(prev => prev + 25);
    }

    setTimeout(() => {
      if (currentQuestion < quizQuestions.length - 1) {
        setCurrentQuestion(prev => prev + 1);
        setSelectedAnswer(null);
        setShowResult(false);
      } else {
        alert(`–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–∞—à —Å—á—ë—Ç: ${score + (answerIndex === quizQuestions[currentQuestion].correct ? 25 : 0)} –∏–∑ ${quizQuestions.length * 25}`);
      }
    }, 2000);
  };

  const resetGame = () => {
    setScore(0);
    setLevel(1);
    setProgress(0);
    setCurrentQuestion(0);
    setSelectedAnswer(null);
    setShowResult(false);
    setPuzzlePieces(prev => prev.map(piece => ({ ...piece, placed: false, x: Math.random() * 200 + 50, y: Math.random() * 100 + 50 })));
  };

  if (!gameMode) {
    return (
      <div className="space-y-6">
        <div className="text-center mb-8">
          <h2 className="text-3xl font-bold text-gray-800 mb-4 animate-bounce-in">
            üéÆ –í—ã–±–µ—Ä–∏ –∏–≥—Ä—É, –¥—Ä—É–∂–æ–∫!
          </h2>
          <p className="text-lg text-gray-600">–î–∞–≤–∞–π –∏–∑—É—á–∞—Ç—å –†–æ—Å—Å–∏—é —á–µ—Ä–µ–∑ –≤–µ—Å—ë–ª—ã–µ –∏–≥—Ä—ã</p>
        </div>

        <div className="grid md:grid-cols-3 gap-6">
          <Card 
            className="cursor-pointer hover:shadow-xl transition-all duration-300 hover:-translate-y-2 border-4 border-blue-200 hover:border-blue-400 animate-fade-in"
            onClick={() => setGameMode('puzzle')}
          >
            <CardHeader className="text-center">
              <div className="w-20 h-20 bg-gradient-to-r from-blue-400 to-green-400 rounded-full flex items-center justify-center mx-auto mb-4 animate-pulse-color">
                <Icon name="MapPin" className="text-white" size={32} />
              </div>
              <CardTitle className="text-2xl">üß© –ü–∞–∑–ª –†–æ—Å—Å–∏–∏</CardTitle>
              <CardDescription className="text-lg">–°–æ–±–µ—Ä–∏ –∫–∞—Ä—Ç—É –Ω–∞—à–µ–π —Å—Ç—Ä–∞–Ω—ã!</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="text-center space-y-2">
                <Badge className="bg-green-100 text-green-800">–õ–µ–≥–∫–æ</Badge>
                <p className="text-sm text-gray-600">–ò–∑—É—á–∞–π –≥–æ—Ä–æ–¥–∞ –∏ —Ä–µ–≥–∏–æ–Ω—ã</p>
              </div>
            </CardContent>
          </Card>

          <Card 
            className="cursor-pointer hover:shadow-xl transition-all duration-300 hover:-translate-y-2 border-4 border-purple-200 hover:border-purple-400 animate-fade-in"
            style={{ animationDelay: '0.2s' }}
            onClick={() => setGameMode('quiz')}
          >
            <CardHeader className="text-center">
              <div className="w-20 h-20 bg-gradient-to-r from-purple-400 to-pink-400 rounded-full flex items-center justify-center mx-auto mb-4 animate-pulse-color">
                <Icon name="Brain" className="text-white" size={32} />
              </div>
              <CardTitle className="text-2xl">üéØ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞</CardTitle>
              <CardDescription className="text-lg">–û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –†–æ—Å—Å–∏–∏!</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="text-center space-y-2">
                <Badge className="bg-yellow-100 text-yellow-800">–°—Ä–µ–¥–Ω–µ</Badge>
                <p className="text-sm text-gray-600">–ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è</p>
              </div>
            </CardContent>
          </Card>

          <Card 
            className="cursor-pointer hover:shadow-xl transition-all duration-300 hover:-translate-y-2 border-4 border-red-200 hover:border-red-400 animate-fade-in"
            style={{ animationDelay: '0.4s' }}
            onClick={() => setGameMode('coloring')}
          >
            <CardHeader className="text-center">
              <div className="w-20 h-20 bg-gradient-to-r from-red-400 to-orange-400 rounded-full flex items-center justify-center mx-auto mb-4 animate-pulse-color">
                <Icon name="Palette" className="text-white" size={32} />
              </div>
              <CardTitle className="text-2xl">üé® –†–∞—Å–∫—Ä–∞—Å–∫–∏</CardTitle>
              <CardDescription className="text-lg">–†–∞—Å–∫—Ä–∞—à–∏–≤–∞–π —Å–∏–º–≤–æ–ª—ã –†–æ—Å—Å–∏–∏!</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="text-center space-y-2">
                <Badge className="bg-blue-100 text-blue-800">–õ–µ–≥–∫–æ</Badge>
                <p className="text-sm text-gray-600">–†–∞–∑–≤–∏–≤–∞–π —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ</p>
              </div>
            </CardContent>
          </Card>
        </div>

        <div className="bg-gradient-to-r from-yellow-100 to-orange-100 p-6 rounded-2xl border-4 border-yellow-300">
          <div className="text-center">
            <h3 className="text-2xl font-bold text-gray-800 mb-4">üèÜ –¢–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h3>
            <div className="grid grid-cols-3 gap-4">
              <div className="bg-white p-4 rounded-xl">
                <div className="text-3xl font-bold text-blue-600">12</div>
                <div className="text-sm text-gray-600">–ò–≥—Ä –ø—Ä–æ–π–¥–µ–Ω–æ</div>
              </div>
              <div className="bg-white p-4 rounded-xl">
                <div className="text-3xl font-bold text-green-600">850</div>
                <div className="text-sm text-gray-600">–û—á–∫–æ–≤ –Ω–∞–±—Ä–∞–Ω–æ</div>
              </div>
              <div className="bg-white p-4 rounded-xl">
                <div className="text-3xl font-bold text-purple-600">5</div>
                <div className="text-sm text-gray-600">–£—Ä–æ–≤–µ–Ω—å</div>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* –ò–≥—Ä–æ–≤–∞—è –ø–∞–Ω–µ–ª—å */}
      <div className="bg-gradient-to-r from-blue-500 to-purple-600 text-white p-6 rounded-3xl shadow-lg animate-slide-in-right">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <Button 
              onClick={() => setGameMode(null)}
              variant="ghost" 
              className="text-white hover:bg-white hover:bg-opacity-20"
            >
              <Icon name="ArrowLeft" className="mr-2" size={16} />
              –ù–∞–∑–∞–¥
            </Button>
            <div>
              <h2 className="text-2xl font-bold">
                {gameMode === 'puzzle' && 'üß© –ü–∞–∑–ª –†–æ—Å—Å–∏–∏'}
                {gameMode === 'quiz' && 'üéØ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞'}
                {gameMode === 'coloring' && 'üé® –†–∞—Å–∫—Ä–∞—Å–∫–∏'}
              </h2>
              <p className="text-blue-100">–£—Ä–æ–≤–µ–Ω—å {level}</p>
            </div>
          </div>
          
          <div className="flex items-center space-x-6">
            <div className="text-center">
              <div className="text-3xl font-bold">{score}</div>
              <div className="text-sm text-blue-100">–û—á–∫–∏</div>
            </div>
            <div className="text-center">
              <div className="text-3xl font-bold">{Math.round(progress)}%</div>
              <div className="text-sm text-blue-100">–ü—Ä–æ–≥—Ä–µ—Å—Å</div>
            </div>
            <Button 
              onClick={resetGame}
              variant="ghost" 
              className="text-white hover:bg-white hover:bg-opacity-20"
            >
              <Icon name="RotateCcw" size={16} />
            </Button>
          </div>
        </div>
        <Progress value={progress} className="mt-4 h-3" />
      </div>

      {/* –ü–∞–∑–ª */}
      {gameMode === 'puzzle' && (
        <Card className="animate-fade-in">
          <CardHeader>
            <CardTitle>–°–æ–±–µ—Ä–∏ –∫–∞—Ä—Ç—É –†–æ—Å—Å–∏–∏!</CardTitle>
            <CardDescription>–ü–µ—Ä–µ—Ç–∞—â–∏ –≥–æ—Ä–æ–¥–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –º–µ—Å—Ç–∞</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="relative bg-gradient-to-br from-green-100 to-blue-100 rounded-2xl p-8 min-h-[400px] border-4 border-dashed border-gray-300">
              <img 
                src="/img/53a02554-5b91-419d-b79f-1740b280a6a9.jpg" 
                alt="–ö–∞—Ä—Ç–∞ –†–æ—Å—Å–∏–∏" 
                className="absolute inset-4 w-[calc(100%-2rem)] h-[calc(100%-2rem)] object-cover rounded-xl opacity-30"
              />
              
              {puzzlePieces.map(piece => (
                <div
                  key={piece.id}
                  className={`absolute w-20 h-12 flex items-center justify-center text-sm font-bold rounded-lg cursor-move transition-all duration-300 ${
                    piece.placed 
                      ? 'bg-green-500 text-white shadow-lg animate-bounce-in' 
                      : 'bg-blue-500 text-white hover:bg-blue-600 hover:scale-110'
                  }`}
                  style={{ left: piece.x, top: piece.y }}
                  draggable
                  onDragEnd={(e) => {
                    const rect = e.currentTarget.parentElement?.getBoundingClientRect();
                    if (rect) {
                      const x = e.clientX - rect.left;
                      const y = e.clientY - rect.top;
                      handlePuzzleDrop(piece.id, x, y);
                    }
                  }}
                >
                  {piece.name}
                </div>
              ))}
            </div>
            
            {puzzlePieces.every(piece => piece.placed) && (
              <div className="text-center mt-6 animate-bounce-in">
                <div className="text-6xl mb-4">üéâ</div>
                <h3 className="text-2xl font-bold text-green-600">–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</h3>
                <p className="text-gray-600">–¢—ã —Å–æ–±—Ä–∞–ª –∫–∞—Ä—Ç—É –†–æ—Å—Å–∏–∏!</p>
              </div>
            )}
          </CardContent>
        </Card>
      )}

      {/* –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ */}
      {gameMode === 'quiz' && (
        <Card className="animate-fade-in">
          <CardHeader>
            <CardTitle className="flex items-center justify-between">
              <span>–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ –†–æ—Å—Å–∏–∏</span>
              <Badge variant="secondary">{currentQuestion + 1} –∏–∑ {quizQuestions.length}</Badge>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-center mb-8">
              <div className="text-8xl mb-4 animate-bounce-in">
                {quizQuestions[currentQuestion].emoji}
              </div>
              <h3 className="text-2xl font-bold mb-6">
                {quizQuestions[currentQuestion].question}
              </h3>
            </div>

            <div className="grid grid-cols-2 gap-4">
              {quizQuestions[currentQuestion].options.map((option, index) => (
                <Button
                  key={index}
                  onClick={() => handleQuizAnswer(index)}
                  disabled={showResult}
                  className={`h-16 text-lg transition-all duration-300 ${
                    showResult
                      ? index === quizQuestions[currentQuestion].correct
                        ? 'bg-green-500 hover:bg-green-500 animate-bounce-in'
                        : selectedAnswer === index
                        ? 'bg-red-500 hover:bg-red-500'
                        : 'bg-gray-300'
                      : 'bg-gradient-to-r from-blue-400 to-purple-400 hover:from-blue-500 hover:to-purple-500 hover:scale-105'
                  }`}
                >
                  {option}
                </Button>
              ))}
            </div>

            {showResult && (
              <div className="text-center mt-6 animate-fade-in">
                {selectedAnswer === quizQuestions[currentQuestion].correct ? (
                  <div>
                    <div className="text-6xl mb-2">‚úÖ</div>
                    <h4 className="text-xl font-bold text-green-600">–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</h4>
                  </div>
                ) : (
                  <div>
                    <div className="text-6xl mb-2">‚ùå</div>
                    <h4 className="text-xl font-bold text-red-600">–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!</h4>
                    <p className="text-gray-600">
                      –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {quizQuestions[currentQuestion].options[quizQuestions[currentQuestion].correct]}
                    </p>
                  </div>
                )}
              </div>
            )}
          </CardContent>
        </Card>
      )}

      {/* –†–∞—Å–∫—Ä–∞—Å–∫–∏ */}
      {gameMode === 'coloring' && (
        <Card className="animate-fade-in">
          <CardHeader>
            <CardTitle>–†–∞—Å–∫—Ä–∞—Å—å —Å–∏–º–≤–æ–ª—ã –†–æ—Å—Å–∏–∏!</CardTitle>
            <CardDescription>–í—ã–±–µ—Ä–∏ —Ü–≤–µ—Ç –∏ —Ä–∞—Å–∫—Ä–∞—Å—å –∫–∞—Ä—Ç–∏–Ω–∫—É</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="text-center">
              <div className="bg-gradient-to-br from-red-100 to-blue-100 p-8 rounded-2xl border-4 border-dashed border-gray-300 mb-6">
                <div className="text-9xl mb-4 animate-bounce-in">üá∑üá∫</div>
                <p className="text-xl text-gray-600">–§–ª–∞–≥ –†–æ—Å—Å–∏–∏</p>
              </div>

              <div className="flex justify-center space-x-4 mb-6">
                {['red', 'blue', 'white', 'yellow', 'green'].map(color => (
                  <div
                    key={color}
                    className={`w-12 h-12 rounded-full cursor-pointer border-4 border-gray-300 hover:border-gray-500 transition-all hover:scale-110`}
                    style={{ backgroundColor: color }}
                  />
                ))}
              </div>

              <div className="text-center">
                <div className="text-6xl mb-4 animate-bounce-in">üé®</div>
                <h3 className="text-2xl font-bold text-purple-600">–†–∞—Å–∫—Ä–∞—Å–∫–∏ —Å–∫–æ—Ä–æ!</h3>
                <p className="text-gray-600">–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</p>
              </div>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default InteractiveGame;